/**
 * @file light_sensor_sender.cpp
 * @brief Nodo emisor de luz usando ESP32 y LDR.
 *
 * @details Este nodo se conecta a una red WiFi, lee la intensidad de luz desde una LDR
 * conectada a un pin anal√≥gico del ESP32 y env√≠a los datos empaquetados (ID + float)
 * a un receptor UDP remoto cada 1 segundo como porcentaje (0‚Äì100%).
 *
 * @version 1.2
 * @date 2025-05-06
 */

#include <WiFi.h>
#include <WiFiUdp.h>

// === Configuraci√≥n de red WiFi ===
static const char* WIFI_SSID     = "El pocas";
static const char* WIFI_PASSWORD = "nosequeponer";

// === Configuraci√≥n del receptor UDP ===
static const char* UDP_ADDRESS = "192.168.128.26";
static const uint16_t UDP_PORT = 4210;

// === Configuraci√≥n del sensor ===
static const uint8_t LIGHT_SENSOR_PIN = 34;  // Pin anal√≥gico del ESP32
static const uint8_t SENSOR_ID = 3;          // ID del sensor de luz

// === Estructura del paquete de datos ===
struct SensorData {
  uint8_t id;     ///< ID del sensor
  float data;     ///< Valor del sensor como porcentaje
};

WiFiUDP udp;

/**
  * @brief Conecta el ESP32 a la red WiFi.
  */
void connectToWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado a WiFi. IP: " + WiFi.localIP().toString());
}

/**
  * @brief Env√≠a los datos del sensor al receptor v√≠a UDP.
  * @param id ID del sensor.
  * @param value Valor a enviar (porcentaje).
  */
void sendSensorData(uint8_t id, float value) {
  if (WiFi.status() != WL_CONNECTED) return;  // Evita enviar si no hay conexi√≥n

  SensorData payload = { id, value };

  udp.beginPacket(UDP_ADDRESS, UDP_PORT);
  udp.write(reinterpret_cast<const uint8_t*>(&payload), sizeof(payload));
  udp.endPacket();

  Serial.printf("üì§ Enviado -> ID: %u | Luz: %.2f%%\n", payload.id, payload.data);
}

void setup() {
  Serial.begin(115200);
  connectToWiFi();
}

void loop() {
  int rawValue = analogRead(LIGHT_SENSOR_PIN);
  float lightValue = static_cast<float>(rawValue);

  sendSensorData(SENSOR_ID, lightValue);
  delay(1000);  // Enviar cada 1 segundo
}