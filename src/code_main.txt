/**
 * @file main.cpp
 * @brief Sistema embebido para monitoreo y control ambiental en invernadero de cannabis medicinal.
 * 
 * @details Este sistema basado en ESP32 se conecta a una red WiFi y recibe datos v√≠a UDP desde sensores distribuidos.
 * Cuando los valores superan los umbrales definidos, o si un sensor deja de responder, se notifica al usuario mediante Telegram.
 * 
 * @authors
 *     Valentina Mu√±oz Arcos  
 *     Luis Miguel G√≥mez Mu√±oz  
 *     David Alejandro Ortega Fl√≥rez  
 * 
 * @version 1.2
 * @date 2025-05-06
 */

#include <WiFi.h>
#include <WiFiUdp.h>
#include <WiFiClientSecure.h>
#include <UniversalTelegramBot.h>
#include <ArduinoJson.h>
#include <math.h>

// === Configuraci√≥n de red y Telegram ===
#define SSID "El pocas"
#define PASSWORD "nosequeponer"
#define BOT_TOKEN "7836875521:AAGTRDghaQIzQcjYiftXSKeHS17xkPnClLs"
#define CHAT_ID "1559018507"

// === Puerto de escucha UDP ===
const int LOCAL_PORT = 4210;  ///< Puerto UDP local para recibir datos
WiFiUDP udp;

// === Cliente seguro y bot de Telegram ===
WiFiClientSecure client;
UniversalTelegramBot bot(BOT_TOKEN, client);

// === Umbrales de alerta para sensores ===
constexpr float THRESHOLD_LIGHT = 500.0;  ///< Umbral de intensidad luminosa (lux)
constexpr float THRESHOLD_TEMP  = 24.0;   ///< Umbral de temperatura (¬∞C)
constexpr float THRESHOLD_HUM   = 80.0;   ///< Umbral de humedad relativa (%)

// === Tiempos m√°ximos sin recibir datos (en milisegundos) ===
constexpr unsigned long SENSOR_TIMEOUT_MS = 20000;  ///< Tiempo l√≠mite antes de considerar inactivo un sensor

// === Estructura para datos de sensor (ID + dato) ===
struct SensorData {
  uint8_t id;   ///< 1 = humedad, 2 = temperatura, 3 = luz
  float data;   ///< Valor medido por el sensor
};

// === Valores actuales de cada sensor ===
struct SensorValues {
  float light = 0.0;
  float temperature = 0.0;
  float humidity = 0.0;
} sensors;

// === √öltimo tiempo de actualizaci√≥n para cada sensor ===
unsigned long lastHumidityUpdate = 0;
unsigned long lastTemperatureUpdate = 0;
unsigned long lastLightUpdate = 0;

// === Estados de alerta para evitar reenv√≠os m√∫ltiples por inactividad ===
bool alertHumidityTimeoutSent = false;
bool alertTemperatureTimeoutSent = false;
bool alertLightTimeoutSent = false;

/**
 * @brief Conecta el ESP32 a la red WiFi especificada.
 */
void connectWiFi() {
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID, PASSWORD);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
  Serial.println("\n‚úÖ Conectado a WiFi");
  Serial.print("IP: "); Serial.println(WiFi.localIP());
  Serial.print("RSSI: "); Serial.println(WiFi.RSSI());
}

/**
 * @brief Inicializa el bot de Telegram y env√≠a mensaje de inicio.
 */
void initTelegramBot() {
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT);
  bot.sendMessage(CHAT_ID, "ü§ñ *Sistema de monitoreo iniciado correctamente*", "Markdown");
  Serial.println("‚úÖ Bot de Telegram inicializado");
}

/**
 * @brief Inicia el socket UDP para escuchar datos entrantes.
 */
void initUDPListener() {
  udp.begin(LOCAL_PORT);
  Serial.printf("üì° Escuchando en puerto UDP %d\n", LOCAL_PORT);
}

/**
 * @brief Actualiza los valores de los sensores si hay cambios significativos.
 * 
 * @param received Datos recibidos desde un sensor (estructura SensorData).
 */
void updateSensorValue(const SensorData& received) {
  unsigned long now = millis();

  // Filtrado b√°sico de datos err√≥neos
  if (received.data < 0 || received.data > 1000) {
    Serial.println("‚ö†Ô∏è Dato de sensor fuera de rango. Ignorado.");
    return;
  }

  // Actualizaci√≥n y validaci√≥n por tipo de sensor
  switch (received.id) {
    case 1: // Humedad
      if (fabs(received.data - sensors.humidity) < 0.1) return;
      sensors.humidity = received.data;
      lastHumidityUpdate = now;
      alertHumidityTimeoutSent = false;
      break;
    case 2: // Temperatura
      if (fabs(received.data - sensors.temperature) < 0.1) return;
      sensors.temperature = received.data;
      lastTemperatureUpdate = now;
      alertTemperatureTimeoutSent = false;
      break;
    case 3: // Luz
      if (fabs(received.data - sensors.light) < 0.1) return;
      sensors.light = received.data;
      lastLightUpdate = now;
      alertLightTimeoutSent = false;
      break;
    default:
      Serial.println("‚ùå ID de sensor desconocido");
      return;
  }

  // Impresi√≥n de valores actualizados
  Serial.printf("‚úÖ Sensor %d actualizado: %.2f\n", received.id, received.data);
  Serial.printf("üìä Humedad: %.2f %% | Temperatura: %.2f ¬∞C | Luz: %.2f lx\n",
                sensors.humidity, sensors.temperature, sensors.light);
}

/**
 * @brief Verifica si alg√∫n sensor supera su umbral y notifica v√≠a Telegram.
 */
void verifyThresholdsAndNotify() {
  char alert[256] = {0};

  if (sensors.light > THRESHOLD_LIGHT) {
    snprintf(alert + strlen(alert), sizeof(alert) - strlen(alert), "üîÜ Alta luz: %.2f lx\n", sensors.light);
  }
  if (sensors.temperature > THRESHOLD_TEMP) {
    snprintf(alert + strlen(alert), sizeof(alert) - strlen(alert), "üå° Alta temperatura: %.2f ¬∞C\n", sensors.temperature);
  }
  if (sensors.humidity > THRESHOLD_HUM) {
    snprintf(alert + strlen(alert), sizeof(alert) - strlen(alert), "üíß Alta humedad: %.2f %%\n", sensors.humidity);
  }

  if (alert[0] != '\0') {
    char message[300];
    snprintf(message, sizeof(message), "üö® *Alerta de sensores:*\n\n%s", alert);
    bot.sendMessage(CHAT_ID, message, "Markdown");
    Serial.println("üì® Alerta enviada a Telegram");
  }
}

/**
 * @brief Verifica si un sensor ha superado su tiempo de espera y notifica si es necesario.
 * 
 * @param lastUpdate Tiempo de la √∫ltima actualizaci√≥n del sensor.
 * @param alertSent Bandera para evitar spam de alertas.
 * @param sensorName Nombre del sensor (para el mensaje).
 */
void checkTimeout(unsigned long lastUpdate, bool &alertSent, const char* sensorName) {
  if (millis() - lastUpdate > SENSOR_TIMEOUT_MS && !alertSent) {
    char msg[100];
    snprintf(msg, sizeof(msg), "‚ö†Ô∏è El sensor de *%s* ha dejado de responder.", sensorName);
    bot.sendMessage(CHAT_ID, msg, "Markdown");
    alertSent = true;
    Serial.printf("üö® Sensor de %s inactivo\n", sensorName);
  }
}

/**
 * @brief Verifica todos los sensores por posibles desconexiones.
 */
void checkSensorTimeouts() {
  checkTimeout(lastHumidityUpdate, alertHumidityTimeoutSent, "humedad");
  checkTimeout(lastTemperatureUpdate, alertTemperatureTimeoutSent, "temperatura");
  checkTimeout(lastLightUpdate, alertLightTimeoutSent, "luz");
}

/**
 * @brief Escucha por paquetes UDP y procesa los datos recibidos.
 */
void listenUDP() {
  int packetSize = udp.parsePacket();
  if (packetSize == sizeof(SensorData)) {
    SensorData received;
    udp.read((uint8_t*)&received, sizeof(SensorData));
    updateSensorValue(received);
    verifyThresholdsAndNotify();
  }
}

/**
 * @brief Funci√≥n de configuraci√≥n inicial del sistema.
 */
void setup() {
  Serial.begin(115200);
  connectWiFi();
  initTelegramBot();
  initUDPListener();
}

/**
 * @brief Bucle principal del sistema, donde se realiza monitoreo continuo.
 */
void loop() {
  listenUDP();
  checkSensorTimeouts();
  // esp_task_wdt_reset();  // <- Si decides activar watchdog
}
