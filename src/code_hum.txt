/**
 * @file humidity_sender.cpp
 * @brief Nodo sensor de humedad que env√≠a datos v√≠a UDP a un receptor.
 *
 * @details Este nodo ESP32 utiliza un sensor DHT11 para medir la humedad y transmite los datos
 * empaquetados como una estructura binaria (ID + float) v√≠a UDP hacia un nodo receptor con IP conocida.
 * El ID para este nodo es 1. La transmisi√≥n ocurre cada 2 segundos, con validaci√≥n de lectura y conexi√≥n WiFi.
 *
 * @version 1.1
 * @date 2025-05-06
 */

#include <WiFi.h>
#include <WiFiUdp.h>
#include <DHT.h>

// === Configuraci√≥n de red WiFi ===
static const char* WIFI_SSID     = "El pocas";
static const char* WIFI_PASSWORD = "nosequeponer";

// === Configuraci√≥n del receptor UDP ===
static const char* UDP_ADDRESS = "192.168.128.26";
static const uint16_t UDP_PORT = 4210;

// === Configuraci√≥n del sensor DHT ===
static const uint8_t DHT_PIN   = 4;
static const uint8_t SENSOR_ID = 1;  // ID del sensor de humedad
static const uint8_t DHT_TYPE  = DHT11;
DHT dht(DHT_PIN, DHT_TYPE);

// === Estructura para el env√≠o de datos ===
struct SensorData {
  uint8_t id;    ///< ID del sensor (1 = humedad)
  float data;    ///< Valor de humedad en %
};

WiFiUDP udp;

/**
 * @brief Conecta el ESP32 a la red WiFi.
 */
void connectToWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado a WiFi. IP: " + WiFi.localIP().toString());
}

/**
 * @brief Env√≠a los datos del sensor al receptor v√≠a UDP.
 * @param id ID del sensor (1 = humedad)
 * @param value Valor de humedad a enviar
 */
void sendSensorData(uint8_t id, float value) {
  if (WiFi.status() != WL_CONNECTED) return;

  SensorData payload = { id, value };

  udp.beginPacket(UDP_ADDRESS, UDP_PORT);
  udp.write(reinterpret_cast<const uint8_t*>(&payload), sizeof(payload));
  udp.endPacket();

  Serial.printf("üì§ Enviado -> ID: %u | Humedad: %.2f %%\n", payload.id, payload.data);
}

void setup() {
  Serial.begin(115200);
  dht.begin();
  connectToWiFi();
}

void loop() {
  float humidity = dht.readHumidity();

  if (isnan(humidity)) {
    Serial.println("‚ùå Error al leer la humedad del sensor DHT11");
  } else {
    sendSensorData(SENSOR_ID, humidity);
  }

  delay(2000);
}
