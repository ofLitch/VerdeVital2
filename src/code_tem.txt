/**
 * @file temperature_sender.cpp
 * @brief Nodo emisor de temperatura usando ESP32 y sensor DHT11.
 *
 * @details Este nodo se conecta a una red WiFi, lee la temperatura desde un sensor DHT11
 * y env√≠a los datos empaquetados (ID + float) al nodo receptor v√≠a UDP.
 * El ID del sensor es 2, y el valor enviado es la temperatura en grados Celsius.
 *
 * @version 1.1
 * @date 2025-05-06
 */

#include <WiFi.h>
#include <WiFiUdp.h>
#include <DHT.h>

// === Configuraci√≥n de red WiFi ===
static const char* WIFI_SSID     = "El pocas";
static const char* WIFI_PASSWORD = "nosequeponer";

// === Configuraci√≥n del receptor UDP ===
static const char* UDP_ADDRESS = "192.168.128.26";
static const uint16_t UDP_PORT = 4210;

// === Configuraci√≥n del sensor DHT ===
static const uint8_t DHT_PIN   = 4;
static const uint8_t SENSOR_ID = 2;  // ID del sensor de temperatura
static const uint8_t DHT_TYPE  = DHT11;
DHT dht(DHT_PIN, DHT_TYPE);

// === Estructura para el env√≠o de datos ===
struct SensorData {
  uint8_t id;    ///< ID del sensor (2 = temperatura)
  float data;    ///< Valor de temperatura en ¬∞C
};

WiFiUDP udp;

/**
  * @brief Conecta el ESP32 a la red WiFi.
  */
void connectToWiFi() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Conectando a WiFi");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n‚úÖ Conectado a WiFi. IP: " + WiFi.localIP().toString());
}

/**
  * @brief Env√≠a los datos del sensor al receptor v√≠a UDP.
  * @param id ID del sensor (2 = temperatura)
  * @param value Valor de la temperatura a enviar
  */
void sendSensorData(uint8_t id, float value) {
  if (WiFi.status() != WL_CONNECTED) return;  // Verifica conexi√≥n

  SensorData payload = { id, value };

  udp.beginPacket(UDP_ADDRESS, UDP_PORT);
  udp.write(reinterpret_cast<const uint8_t*>(&payload), sizeof(payload));
  udp.endPacket();

  Serial.printf("üì§ Enviado -> ID: %u | Temperatura: %.2f ¬∞C\n", payload.id, payload.data);
}

void setup() {
  Serial.begin(115200);
  dht.begin();
  connectToWiFi();
}

void loop() {
  float temperature = dht.readTemperature();

  if (isnan(temperature)) {
    Serial.println("‚ùå Error al leer la temperatura del sensor DHT11");
  } else {
    sendSensorData(SENSOR_ID, temperature);
  }

  delay(2000);  // Espera 2 segundos entre mediciones
}
